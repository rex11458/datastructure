//
//  search.h
//  数据结构
//
//  Created by LiuRex on 2017/8/9.
//  Copyright © 2017年 LiuRex. All rights reserved.
//

/*
 *   8.1)顺序查找
        顺序查找又称为线性查找。它是从线性表的一端开始，顺序扫描线性表，
    依次将扫描到的结点关键字和给定值k相比较，若当前扫描到的结点关键字与
    k相等，则查找成功；若扫描结束后，仍未找到关键字等于k的结点，则查找失败。
    8.2)二分查找
        也称折半查找，要求线性表中的结点必须已按关键字值的递增或递减顺序排列。
    它首先把药查找的关键字k与中间位置结点的关键字相比较，这个中间结点将线性表
    分成了两个子表。若比较结果相等则查找完成；若不相等，再根据k与该中间结点
    关键字的比较大小确定下一步查找哪个子表，这样递归进行下去，直到找到满足条件
    的结点或者该线性表中没有这样的结点。
    8.3)分块查找
        又称索引顺序查找，是顺序查找的一种改进，其性能介于顺序查找和二分查找之间。
    分块查找把线性表分为若干块，每一块中的元素存储顺序是任意的，但块与块之间必须按
    关键字大小排序。即前一块中的最大关键字小于后一块中的最小关键字的值。另外还要建立
    一个索引表，索引表中的一项对应线性表中的一块，索引项由关键字和链域组成，关键字域
    存放相应块的最大关键字，链域存放指向本块第一个结点的指针。索引表按关键字值递增顺
    序排列。
 */


#ifndef search_h
#define search_h

#include <stdio.h>

#define MAXITEM 100
struct indexterm{
    int key;
    int low,high;
};

/*顺序查找*/
int seqsearch(int r[],int k,int n);

/*二分查找*/
int binsearch(int r[],int k,int n);
/*分块查找*/
int blksearch(int r[],struct indexterm idx[],int k,int bn);

#endif /* search_h */
